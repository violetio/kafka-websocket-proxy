include "http.conf"
include "kafka.conf"

kafka.ws.proxy {
  server {
    server-id = "node-1"
    server-id = ${?WSPROXY_SERVER_ID}
    bind-interface = "0.0.0.0"
    bind-interface = ${?WSPROXY_BIND_INTERFACE}
    port = 8078
    port = ${?WSPROXY_PORT}
    secure-health-check-endpoint = true
    secure-health-check-endpoint = ${?WSPROXY_SECURE_HEALTHCHECK_ENDPOINT}
    ssl {
      enabled = false
      enabled = ${?WSPROXY_SSL_ENABLED}
      ssl-only = false
      ssl-only = ${?WSPROXY_SSL_ONLY}
      bind-interface = ${?WSPROXY_SSL_BIND_INTERFACE}
      port = ${?WSPROXY_SSL_PORT}
      keystore-location = ${?WSPROXY_SSL_KEYSTORE_LOCATION}
      keystore-password = ${?WSPROXY_SSL_KEYSTORE_PASS}
    }
    basic-auth {
      enabled = false
      enabled = ${?WSPROXY_BASIC_AUTH_ENABLED}
      realm = ${?WSPROXY_BASIC_AUTH_REALM}
      username = ${?WSPROXY_BASIC_AUTH_USERNAME}
      password = ${?WSPROXY_BASIC_AUTH_PASSWORD}
    }
    openid-connect {
      enabled = false
      enabled = ${?WSPROXY_OPENID_ENABLED}
      allow-detailed-logging = false
      allow-detailed-logging = ${?WSPROXY_OPENID_ALLOW_DETAILED_LOGGING}
      realm = ""
      realm = ${?WSPROXY_OPENID_REALM}
      well-known-url = ${?WSPROXY_OPENID_WELLKNOWN}
      audience = ${?WSPROXY_OPENID_AUDIENCE}
      revalidation-interval = 10 minutes
      revalidation-interval = ${?WSPROXY_OPENID_REVALIDATION_INTERVAL}
      revalidation-errors-limit = -1
      revalidation-errors-limit = ${?WSPROXY_OPENID_REVALIDATION_ERRORS_LIMIT}
      custom-jwt {
        kafka-token-auth-only = false
        kafka-token-auth-only = ${?WSPROXY_JWT_KAFKA_TOKEN_AUTH_ONLY}
        jwt-kafka-username-key = ${?WSPROXY_JWT_KAFKA_USERNAME_KEY}
        jwt-kafka-password-key = ${?WSPROXY_JWT_KAFKA_PASSWORD_KEY}
      }
    }
    federated-auth {
      enabled = false
      enabled = ${?WSPROXY_FEDERATED_AUTH_ENABLED}
      mapping = ${?WSPROXY_FEDERATED_AUTH_MAPPING}
      body = ${?WSPROXY_FEDERATED_AUTH_BODY}
      uri = ${?WSPROXY_FEDERATED_AUTH_URI}
      timeout = 5000
    }

    jmx {
      manager {
        proxy.status.interval = 5 seconds
        proxy.status.interval = ${?WSPROXY_JMX_PROXY_STATUS_INTERVAL}
      }
    }

    broker-resolution-timeout = 30 seconds
    broker-resolution-timeout = ${?WSPROXY_BROKER_RESOLUTION_TIMEOUT}
    broker-resolution-retries = 25
    broker-resolution-retries = ${?WSPROXY_BROKER_RESOLUTION_RETRIES}
    broker-resolution-retry-interval = 1 second
    broker-resolution-retry-interval = ${?WSPROXY_BROKER_RESOLUTION_RETRY_INTERVAL}
  }

  kafka-client {
    broker-resolution-timeout = 20 seconds
    bootstrap-hosts = ${?WSPROXY_KAFKA_BOOTSTRAP_HOSTS}

    schema-registry {
      url = ${?WSPROXY_SCHEMA_REGISTRY_URL}
      auto-register-schemas = true
      auto-register-schemas = ${?WSPROXY_SCHEMA_AUTO_REGISTER}
      properties {
        schema.registry.basic.auth.credentials.source = USER_INFO
        schema.registry.basic.auth.credentials.source = ${?WSPROXY_SCHEMA_BASIC_AUTH_CREDS_SRC}
        schema.registry.basic.auth.user.info = ${?WSPROXY_SCHEMA_BASIC_AUTH_USER_INFO}
      }
    }

    monitoring-enabled = false
    monitoring-enabled = ${?WSPROXY_CONFLUENT_MONITORING_ENABLED}

    properties {
      security.protocol = PLAINTEXT
      security.protocol = ${?WSPROXY_KAFKA_SECURITY_PROTOCOL}

      // Timeout and retry configs
      request.timeout.ms = 30000
      request.timeout.ms = ${?WSPROXY_KAFKA_CLIENT_REQUEST_TIMEOUT_MS}
      retries = 2147483647
      retries = ${?WSPROXY_KAFKA_CLIENT_NUM_RETRIES}
      retry.backoff.ms = 100
      retry.backoff.ms = ${?WSPROXY_KAFKA_CLIENT_RETRY_BACKOFF_MS}

      // SASL configs
      sasl.mechanism = ${?WSPROXY_KAFKA_SASL_MECHANISM}
      // The below sasl.jaas.config will ONLY be used by the Kafka clients used
      // for internal state inside the proxy.
      // Any connecting WebSocket clients will need to provide their own
      // credentials through the X-Kafka-Auth header, or a JWT token, to gain
      // access. See the README.md for more information on how to use the
      // X-Kafka-Auth header and auth using JWT tokens (OIDC).
      sasl.jaas.config = ${?WSPROXY_KAFKA_SASL_JAAS_CFG}
      sasl.kerberos.service.name = ${?WSPROXY_KAFKA_SASL_KERBEROS_SERVICE_NAME}

      // SSL configs
      ssl.key.password = ${?WSPROXY_KAFKA_SSL_KEY_PASS}
      ssl.endpoint.identification.algorithm = ""
      ssl.endpoint.identification.algorithm = ${?WSPROXY_KAFKA_SASL_ENDPOINT_ID_ALGO}
      ssl.truststore.location = ${?WSPROXY_KAFKA_SSL_TRUSTSTORE_LOCATION}
      ssl.truststore.password = ${?WSPROXY_KAFKA_SSL_TRUSTSTORE_PASS}
      ssl.truststore.type = ${?WSPROXY_KAFKA_SSL_TRUSTSTORE_TYPE}
      ssl.keystore.location = ${?WSPROXY_KAFKA_SSL_KEYSTORE_LOCATION}
      ssl.keystore.password = ${?WSPROXY_KAFKA_SSL_KEYSTORE_PASS}
      ssl.provider = ${?WSPROXY_KAFKA_SSL_PROVIDER}
      ssl.cipher.suites = ${?WSPROXY_KAFKA_SSL_CIPHER_SUITES}
      ssl.enabled.protocols = ${?WSPROXY_KAFKA_SSL_ENABLED_PROTOCOLS}
    }

    // When the confluent-metrics settings are not specifically given, and
    // kafka.ws.proxy.monitoring-enabled is set to true, the values for
    // kafka.ws.proxy.kafka-client are used.
    confluent-monitoring {
      bootstrap-hosts = ${kafka.ws.proxy.kafka-client.bootstrap-hosts}
      bootstrap-hosts = ${?WSPROXY_KAFKA_MONITORING_BOOTSTRAP_HOSTS}
      // DEPRECATED: Use WSPROXY_KAFKA_MONITORING_BOOTSTRAP_HOSTS
      bootstrap-hosts = ${?WSPROXY_KAFKA_METRICS_BOOTSTRAP_HOSTS}
      bootstrap-hosts = ${?WSPROXY_KAFKA_METRICS_BOOTSTRAP_URLS}

      properties {
        interceptor.topic = "_confluent-metrics"
        interceptor.topic = ${?WSPROXY_KAFKA_MONITORING_INTERCEPTOR_TOPIC}

        request.timeout.ms = ${kafka.ws.proxy.kafka-client.properties.request.timeout.ms}
        retry.backoff.ms = ${kafka.ws.proxy.kafka-client.properties.retry.backoff.ms}

        security.protocol = ${kafka.ws.proxy.kafka-client.properties.security.protocol}
        security.protocol = ${?WSPROXY_KAFKA_MONITORING_SECURITY_PROTOCOL}
        // SASL
        sasl.mechanism = ${?kafka.ws.proxy.kafka-client.properties.sasl.mechanism}
        sasl.mechanism = ${?WSPROXY_KAFKA_MONITORING_SASL_MECHANISM}
        sasl.jaas.config = ${?kafka.ws.proxy.kafka-client.properties.sasl.jaas.config}
        sasl.jaas.config = ${?WSPROXY_KAFKA_MONITORING_SASL_JAAS_CFG}
        sasl.kerberos.service.name = ${?kafka.ws.proxy.kafka-client.properties.sasl.kerberos.service.name}
        sasl.kerberos.service.name = ${?WSPROXY_KAFKA_MONITORING_SASL_KERBEROS_SERVICE_NAME}
        // SSL
        ssl.key.password = ${?kafka.ws.proxy.kafka-client.properties.ssl.key.password}
        ssl.key.password = ${?WSPROXY_KAFKA_MONITORING_SSL_KEY_PASS}
        ssl.endpoint.identification.algorithm = ${?kafka.ws.proxy.kafka-client.properties.ssl.endpoint.identification.algorithm}
        ssl.endpoint.identification.algorithm = ${?WSPROXY_KAFKA_MONITORING_SASL_ENDPOINT_ID_ALOGO}
        ssl.truststore.location = ${?kafka.ws.proxy.kafka-client.properties.ssl.truststore.location}
        ssl.truststore.location = ${?WSPROXY_KAFKA_MONITORING_SSL_TRUSTSTORE_LOCATION}
        ssl.truststore.truststore.password = ${?kafka.ws.proxy.kafka-client.properties.ssl.truststore.truststore.password}
        ssl.truststore.truststore.password = ${?WSPROXY_KAFKA_MONITORING_SSL_TRUSTSTORE_PASS}
        ssl.truststore.type = ${?kafka.ws.proxy.kafka-client.properties.ssl.truststore.type}
        ssl.truststore.type = ${?WSPROXY_KAFKA_MONITORING_SSL_TRUSTSTORE_TYPE}
        ssl.keystore.location = ${?kafka.ws.proxy.kafka-client.properties.ssl.keystore.location}
        ssl.keystore.location = ${?WSPROXY_KAFKA_MONITORING_SSL_KEYSTORE_LOCATION}
        ssl.keystore.password = ${?kafka.ws.proxy.kafka-client.properties.ssl.keystore.password}
        ssl.keystore.password = ${?WSPROXY_KAFKA_MONITORING_SSL_KEYSTORE_PASS}
        ssl.provider = ${?kafka.ws.proxy.kafka-client.properties.ssl.provider}
        ssl.provider = ${?WSPROXY_KAFKA_MONITORING_SSL_PROVIDER}
        ssl.cipher.suites = ${?kafka.ws.proxy.kafka-client.properties.ssl.cipher.suites}
        ssl.cipher.suites = ${?WSPROXY_KAFKA_MONITORING_SSL_CIPHER_SUITES}
        ssl.enabled.protocols = ${?kafka.ws.proxy.kafka-client.properties.ssl.enabled.protocols}
        ssl.enabled.protocols = ${?WSPROXY_KAFKA_MONITORING_SSL_ENABLED_PROTOCOLS}

        // DEPRECATED: WSPROXY_KAFKA_MONITORING_* instead
        security.protocol = ${?WSPROXY_KAFKA_METRICS_SECURITY_PROTOCOL}
        sasl.mechanism = ${?WSPROXY_KAFKA_METRICS_SASL_MECHANISM}
        sasl.jaas.config = ${?WSPROXY_KAFKA_METRICS_SASL_JAAS_CFG}
        sasl.kerberos.service.name = ${?WSPROXY_KAFKA_METRICS_SASL_KERBEROS_SERVICE_NAME}
        ssl.key.password = ${?WSPROXY_KAFKA_METRICS_SSL_KEY_PASS}
        ssl.endpoint.identification.algorithm = ${?WSPROXY_KAFKA_METRICS_SASL_ENDPOINT_ID_ALOGO}
        ssl.truststore.location = ${?WSPROXY_KAFKA_METRICS_SSL_TRUSTSTORE_LOCATION}
        ssl.truststore.truststore.password = ${?WSPROXY_KAFKA_METRICS_SSL_TRUSTSTORE_PASS}
        ssl.truststore.type = ${?WSPROXY_KAFKA_METRICS_SSL_TRUSTSTORE_TYPE}
        ssl.keystore.location = ${?WSPROXY_KAFKA_METRICS_SSL_KEYSTORE_LOCATION}
        ssl.keystore.password = ${?WSPROXY_KAFKA_METRICS_SSL_KEYSTORE_PASS}
        ssl.provider = ${?WSPROXY_KAFKA_METRICS_SSL_PROVIDER}
        ssl.cipher.suites = ${?WSPROXY_KAFKA_METRICS_SSL_CIPHER_SUITES}
        ssl.enabled.protocols = ${?WSPROXY_KAFKA_METRICS_SSL_ENABLED_PROTOCOLS}
      }
    }
  }

  admin-client {
    kafka-client-properties = ${kafka.ws.proxy.kafka-client.properties}
  }

  consumer {
    limits {
      // Setting messages per second to 0, will disable default rate limiting.
      default-messages-per-second = 0
      default-messages-per-second = ${?WSPROXY_CONSUMER_RATELIMIT_DEFAULT_MESSAGES_PER_SEC}
      // Setting max connections per client to 0, will disable default
      // connection limiting.
      default-max-connections-per-client = 0
      default-max-connections-per-client = ${?WSPROXY_CONSUMER_DEFAULT_MAX_CLIENT_CONNECTIONS}
      default-batch-size = 0
      // ¡¡¡DEPRECATED!!! Use WSPROXY_CONSUMER_DEFAULT_BATCH_SIZE instead.
      default-batch-size = ${?WSPROXY_DEFAULT_BATCH_SIZE}
      default-batch-size = ${?WSPROXY_CONSUMER_DEFAULT_BATCH_SIZE}
      // Client specific limits
      client-specific-limits: [
        // Config object has the following HOCON structure:
        // {
        //   group-id = "groupId1",
        // Setting a client specific rate limit will override the default rate
        // limit value only for the given client.
        //   messages-per-second = 10
        // The max connections limit also only applies to the given client.
        //   max-connections = 1
        // }
      ]
    }
    kafka-client-properties = ${kafka.ws.proxy.kafka-client.properties} {
      // Timeout and retry configs
      request.timeout.ms = ${?WSPROXY_KAFKA_CONSUMER_REQUEST_TIMEOUT_MS}
      retries = ${?WSPROXY_KAFKA_CONSUMER_NUM_RETRIES}
      retry.backoff.ms = ${?WSPROXY_KAFKA_CONSUMER_RETRY_BACKOFF_MS}
    }
  }

  producer {
    // RATE LIMITING:
    // The rate limiting implementation is quite naive and does not enforce a
    // limit on the TCP buffers. Rate limiting will only throttle data being
    // sent downstream to the Kafka producer client. This will backpressure
    // inside the kafka-websocket-proxy. But it will not backpressure to the
    // WebSocket client until the OS level TCP receive buffers are filled up,
    // which will trigger the TCP protocol level backpressure. Depending on the
    // size of the TCP buffers, and the data rates, the time it takes for this
    // to occur may vary.
    limits {
      // Setting messages per second to 0, will disable default rate limiting.
      default-messages-per-second = 0
      default-messages-per-second = ${?WSPROXY_PRODUCER_RATELIMIT_DEFAULT_MESSAGES_PER_SEC}
      // Setting max connections per client to 0, will disable default
      // connection limiting.
      default-max-connections-per-client = 0
      default-max-connections-per-client = ${?WSPROXY_PRODUCER_DEFAULT_MAX_CLIENT_CONNECTIONS}
      // Client specific limits
      client-specific-limits: [
        // Config object has the following HOCON structure:
        // {
        //   client-id = "clientId1",
        // Setting a client specific rate limit will override the default rate
        // limit value only for the given client.
        //   messages-per-second = 10
        // The max connections limit also only applies to the given client.
        //   max-connections = 1
        // }
      ]
    }

    // To avoid the typesafe config library crashing when concatenating config
    // objects, the value replacement needs to be defined here. And then be
    // referenced inside the actual kafka-client-properties for the correct key.
    delivery-timeout-ms = 120000
    delivery-timeout-ms = ${?WSPROXY_KAFKA_PRODUCER_DELIVER_TIMEOUT_MS}

    kafka-client-properties = ${kafka.ws.proxy.kafka-client.properties} {
      // Timeout and retry configs
      request.timeout.ms = ${?WSPROXY_KAFKA_PRODUCER_REQUEST_TIMEOUT_MS}
      retries = ${?WSPROXY_KAFKA_PRODUCER_NUM_RETRIES}
      retry.backoff.ms = ${?WSPROXY_KAFKA_PRODUCER_RETRY_BACKOFF_MS}
      // Delivery timeout defines how long to wait for delivery confirmation.
      delivery.timeout.ms = ${kafka.ws.proxy.producer.delivery-timeout-ms}
      max.in.flight.requests.per.connection = ${?WSPROXY_KAFKA_PRODUCER_MAX_IN_FLIGHT_REQ}
    }
  }

  session-handler {
    session-state-topic-init-timeout = 30 seconds
    session-state-topic-init-timeout = ${?WSPROXY_SESSION_STATE_TOPIC_INIT_TIMEOUT}
    session-state-topic-init-retries = 25
    session-state-topic-init-retries = ${?WSPROXY_SESSION_STATE_TOPIC_INIT_RETRIES}
    session-state-topic-init-retry-interval = 1 second
    session-state-topic-init-retry-interval = ${?WSPROXY_SESSION_STATE_TOPIC_INIT_RETRY_INTERVAL}
    session-state-topic-name = "_wsproxy.session.state"
    session-state-topic-name = ${?WSPROXY_SESSION_STATE_TOPIC}
    session-state-replication-factor = 3
    session-state-replication-factor = ${?WSPROXY_SESSION_STATE_REPLICATION_FACTOR}
    session-state-retention = 30 days
    session-state-retention = ${?WSPROXY_SESSION_STATE_RETENTION}
  }

  # CommitHandler specific configurations
  commit-handler {
    # Defines how many uncommitted messages can be in the uncommitted stack
    # per topic partition.
    # When the size limit is reached, the oldest messages (older than
    # max-uncommitted-age) are dropped to make room for new messages.
    max-stack-size = 100
    max-stack-size = ${?WSPROXY_CH_MAX_STACK_SIZE}
    # When enabled, triggers a periodic job to check the commit handler stack
    # for messages that are older than max-age. The newest of these uncommitted
    # messages will be committed, and the stack is cleaned up accordingly.
    auto-commit-enabled = false
    auto-commit-enabled = ${?WSPROXY_CH_AUTOCOMMIT_ENABLED}
    auto-commit-interval = 1 second
    auto-commit-interval = ${?WSPROXY_CH_AUTOCOMMIT_INTERVAL}
    # The max allowed age of uncommitted messages in the commit handler stack.
    # If `auto-commit-enabled` is `true`, the newest message of the messages
    # that are too old will be committed, and older messages are dropped. This
    # allows for keeping the stacks smaller.
    auto-commit-max-age = 20 seconds
    auto-commit-max-age = ${?WSPROXY_CH_AUTOCOMMIT_MAX_AGE}
  }
}

# The Actor system...
akka {
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  loglevel = "DEBUG"
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  log-dead-letters-during-shutdown = off
}
